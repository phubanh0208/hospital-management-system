name: Hospital Management System CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      
      rabbitmq:
        image: rabbitmq:3.12-management
        ports:
          - 5672:5672
          - 15672:15672

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'hospital-management-backend/package.json'

    - name: Install root dependencies
      working-directory: hospital-management-backend
      run: npm ci

    - name: Build shared package
      working-directory: hospital-management-backend/shared
      run: |
        npm ci
        npm run build

    - name: Install and test services
      working-directory: hospital-management-backend
      run: |
        # Install dependencies for all services
        for service in auth-service patient-service appointment-service prescription-service notification-service analytics-service api-gateway; do
          echo "Installing dependencies for $service..."
          cd $service
          npm ci
          cd ..
        done

    - name: Run linting
      working-directory: hospital-management-backend
      run: |
        for service in auth-service patient-service appointment-service prescription-service notification-service analytics-service api-gateway; do
          echo "Linting $service..."
          cd $service
          npm run lint || true
          cd ..
        done

    - name: Run tests
      working-directory: hospital-management-backend
      run: |
        for service in auth-service patient-service appointment-service prescription-service notification-service analytics-service api-gateway; do
          echo "Testing $service..."
          cd $service
          npm test || true
          cd ..
        done
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        MONGODB_URI: mongodb://localhost:27017/test_notification_db
        REDIS_URL: redis://localhost:6379
        RABBITMQ_URL: amqp://localhost:5672

    - name: Build TypeScript
      working-directory: hospital-management-backend
      run: |
        for service in auth-service patient-service appointment-service prescription-service notification-service analytics-service api-gateway; do
          echo "Building $service..."
          cd $service
          npm run build || true
          cd ..
        done

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker images
      working-directory: hospital-management-backend
      run: |
        # Build all service images
        for service in auth-service patient-service appointment-service prescription-service notification-service analytics-service api-gateway; do
          echo "Building Docker image for $service..."
          cd $service
          docker build -t hospital-$service:latest .
          cd ..
        done

    - name: Test Docker Compose
      run: |
        # Start databases
        docker-compose up -d
        sleep 30
        
        # Start services
        cd hospital-management-backend
        docker-compose up -d
        sleep 60
        
        # Test health endpoints
        curl -f http://localhost:3000/health || exit 1
        
        # Cleanup
        docker-compose down
        cd ..
        docker-compose down

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Run security audit
      working-directory: hospital-management-backend
      run: |
        # Audit all services
        for service in shared auth-service patient-service appointment-service prescription-service notification-service analytics-service api-gateway; do
          echo "Security audit for $service..."
          cd $service
          npm audit --audit-level high || true
          cd ..
        done

    - name: Check for secrets
      run: |
        # Simple check for potential secrets
        echo "Checking for potential secrets..."
        grep -r -i "password\|secret\|key\|token" --exclude-dir=node_modules --exclude-dir=.git --exclude="*.md" . || true
