# Multi-stage Dockerfile for Analytics Service
# Build context: hospital-management-backend/

FROM node:18-alpine AS builder

# Install build dependencies
RUN apk add --no-cache python3 make g++

WORKDIR /app

# Build shared package first
COPY shared/ ./shared/
WORKDIR /app/shared
RUN npm install && npm run build

# Build analytics service
WORKDIR /app
COPY analytics-service/ ./analytics-service/
WORKDIR /app/analytics-service
RUN npm install && npm run build

# Production stage
FROM node:18-alpine AS production

WORKDIR /app

# Install runtime dependencies
RUN apk add --no-cache dumb-init

# Copy built shared package
COPY --from=builder /app/shared/dist/ ./shared/dist/
COPY --from=builder /app/shared/package.json ./shared/

# Copy built analytics service
COPY --from=builder /app/analytics-service/dist/ ./dist/
COPY --from=builder /app/analytics-service/package*.json ./

# Install only production dependencies
RUN npm ci --only=production && npm cache clean --force

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S analytics -u 1001

# Change ownership
RUN chown -R analytics:nodejs /app
USER analytics

EXPOSE 3006

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3006/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/index.js"]
