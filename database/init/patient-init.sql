-- Patient Service Database Initialization
-- This script sets up the patient service database schema

-- Create custom types
CREATE TYPE gender_enum AS ENUM ('male', 'female', 'other');
CREATE TYPE blood_type_enum AS ENUM ('A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-');

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Patients table
CREATE TABLE patients (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    patient_code VARCHAR(20) UNIQUE NOT NULL,
    
    -- Personal Info
    full_name VARCHAR(255) NOT NULL,
    date_of_birth DATE NOT NULL,
    gender gender_enum NOT NULL,
    phone VARCHAR(15) NOT NULL,
    email VARCHAR(254),
    address JSONB NOT NULL,
    
    -- Medical Info
    blood_type blood_type_enum,
    allergies TEXT,
    medical_history TEXT,
    
    -- Emergency Contact (stored as JSONB)
    emergency_contact JSONB NOT NULL,
    
    -- Insurance Info (stored as JSONB)
    insurance_info JSONB,
    
    -- References (denormalized from other services)
    created_by_user_id UUID NOT NULL, -- From Auth Service
    hospital_id UUID, -- From Hospital Service (future)
    
    -- Metadata
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Patient documents table
CREATE TABLE patient_documents (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    patient_id UUID REFERENCES patients(id) ON DELETE CASCADE,
    document_type VARCHAR(50) NOT NULL, -- 'id_card', 'medical_report', 'insurance'
    file_name VARCHAR(255) NOT NULL,
    file_path VARCHAR(500) NOT NULL,
    file_size BIGINT,
    mime_type VARCHAR(100),
    uploaded_by_user_id UUID NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Patient medical history table
CREATE TABLE patient_medical_history (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    patient_id UUID REFERENCES patients(id) ON DELETE CASCADE,
    condition_name VARCHAR(255) NOT NULL,
    diagnosed_date DATE,
    status VARCHAR(50) DEFAULT 'active', -- 'active', 'resolved', 'chronic'
    notes TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Patient visit summary (denormalized data from other services)
CREATE TABLE patient_visit_summary (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    patient_id UUID UNIQUE REFERENCES patients(id) ON DELETE CASCADE,
    last_appointment_date TIMESTAMPTZ,
    total_appointments INTEGER DEFAULT 0,
    active_prescriptions INTEGER DEFAULT 0,
    last_prescription_date TIMESTAMPTZ,
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Indexes for performance
CREATE INDEX idx_patients_code ON patients(patient_code);
CREATE INDEX idx_patients_phone ON patients(phone);
CREATE INDEX idx_patients_name ON patients(full_name);
CREATE INDEX idx_patients_created_by ON patients(created_by_user_id);
CREATE INDEX idx_patients_dob ON patients(date_of_birth);
CREATE INDEX idx_patient_documents_patient_id ON patient_documents(patient_id);
CREATE INDEX idx_patient_documents_type ON patient_documents(document_type);
CREATE INDEX idx_patient_history_patient_id ON patient_medical_history(patient_id);

-- Function to auto-generate patient code
-- Format: BN + YYYYMMDD + 001 (e.g., BN20250807001)
CREATE OR REPLACE FUNCTION generate_patient_code()
RETURNS TRIGGER AS $$
DECLARE
    new_code VARCHAR(20);
    last_number INTEGER;
BEGIN
    -- Get the last patient number for today
    SELECT COALESCE(
        MAX(CAST(SUBSTRING(patient_code FROM 11) AS INTEGER)), 
        0
    ) INTO last_number
    FROM patients 
    WHERE patient_code LIKE 'BN' || TO_CHAR(NOW(), 'YYYYMMDD') || '%';
    
    -- Generate new code: BN + YYYYMMDD + 001
    new_code := 'BN' || TO_CHAR(NOW(), 'YYYYMMDD') || LPAD((last_number + 1)::TEXT, 3, '0');
    
    NEW.patient_code := new_code;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to auto-generate patient code
CREATE TRIGGER trigger_generate_patient_code
    BEFORE INSERT ON patients
    FOR EACH ROW
    WHEN (NEW.patient_code IS NULL OR NEW.patient_code = '')
    EXECUTE FUNCTION generate_patient_code();

-- Function to update visit summary
CREATE OR REPLACE FUNCTION update_patient_visit_summary()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO patient_visit_summary (patient_id, updated_at)
    VALUES (NEW.id, NOW())
    ON CONFLICT (patient_id) 
    DO UPDATE SET updated_at = NOW();
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to update visit summary when patient is created
CREATE TRIGGER trigger_update_visit_summary
    AFTER INSERT ON patients
    FOR EACH ROW
    EXECUTE FUNCTION update_patient_visit_summary();

-- Insert sample data
-- Note: patient_code will be auto-generated by trigger (format: BN + YYYYMMDD + 001)
INSERT INTO patients (
    full_name, date_of_birth, gender, phone, email, address, 
    blood_type, emergency_contact, created_by_user_id
) VALUES 
(
    'Nguyễn Văn A', 
    '1990-01-15', 
    'male', 
    '0901234567', 
    'nguyenvana@email.com',
    '{"street": "123 Đường ABC", "ward": "Phường 1", "district": "Quận 1", "city": "TP.HCM"}'::JSONB,
    'A+',
    '{"name": "Nguyễn Thị B", "phone": "0907654321", "relationship": "Vợ"}'::JSONB,
    uuid_generate_v4()
),
(
    'Trần Thị C', 
    '1985-05-20', 
    'female', 
    '0912345678', 
    'tranthic@email.com',
    '{"street": "456 Đường XYZ", "ward": "Phường 2", "district": "Quận 3", "city": "TP.HCM"}'::JSONB,
    'O+',
    '{"name": "Trần Văn D", "phone": "0908765432", "relationship": "Chồng"}'::JSONB,
    uuid_generate_v4()
),
(
    'Lê Minh D',
    '1992-08-12',
    'male',
    '0923456789',
    'leminhd@email.com',
    '{"street": "789 Đường DEF", "ward": "Phường 5", "district": "Quận 7", "city": "TP.HCM"}'::JSONB,
    'AB+',
    '{"name": "Lê Thị E", "phone": "0909876543", "relationship": "Mẹ"}'::JSONB,
    uuid_generate_v4()
);

COMMENT ON TABLE patients IS 'Patient management and basic information';
COMMENT ON TABLE patient_documents IS 'Patient document attachments';
COMMENT ON TABLE patient_medical_history IS 'Patient medical condition history';
COMMENT ON TABLE patient_visit_summary IS 'Aggregated patient visit statistics';
